import os
import logging
from elasticsearch import Elasticsearch

# Hardcoded file path
FILE_PATH = '/datafiles/infadata/scripts/yourfile.txt'
LOG_PATH_TEMPLATE = '/datafiles/infadata/elastic/Scripts/log/script_{}.log'

# Configure logging based on current date
current_date = datetime.datetime.now().strftime('%Y%m%d')
LOG_PATH = LOG_PATH_TEMPLATE.format(current_date)

if not os.path.exists(os.path.dirname(LOG_PATH)):
    os.makedirs(os.path.dirname(LOG_PATH))

logging.basicConfig(filename=LOG_PATH, level=logging.INFO,
                    format='%(asctime)s %(levelname)s:%(message)s')

def read_file(file_path):
    records = []
    with open(file_path, 'r') as file:
        # Skip the header line
        next(file)
        for line in file:
            parts = line.strip().split(',')
            if len(parts) == 3:
                records.append({'custid': parts[0].strip(), 'firstname': parts[1].strip(), 'lastname': parts[2].strip()})
    return records

def get_indices_with_customerid_field(es):
    all_indices = es.indices.get_alias().keys()
    indices_with_customerid = []

    for index in all_indices:
        mapping = es.indices.get_mapping(index=index)
        properties = mapping[index]['mappings'].get('properties', {})
        if 'CustomerID' in properties:
            indices_with_customerid.append(index)
    
    return indices_with_customerid

def search_and_delete_duplicates(es, indices, record):
    query = {
        "bool": {
            "must": [
                {"term": {"CustomerID": record['custid']}},
                {"term": {"FirstName": record['firstname']}},
                {"term": {"LastName": record['lastname']}}
            ]
        }
    }

    matched_info = {}
    unmatched_info = []
    for index in indices:
        result = es.search(index=index, body={"query": query, "size": 1000})
        hits = result['hits']['hits']
        if hits:
            first_doc_id = hits[0]['_id']
            print(f"Index: {index}")
            print(f"First matching ID: {first_doc_id}")

            deleted_ids = []
            for hit in hits[1:]:
                doc_id = hit['_id']
                es.delete(index=index, id=doc_id)
                deleted_ids.append(doc_id)
                print(f"Deleted document in index '{index}' with ID '{doc_id}'")

            matched_info[index] = {
                'total_matched': len(hits),
                'first_doc_id': first_doc_id,
                'deleted_ids': deleted_ids
            }
        else:
            unmatched_info.append(index)

    return matched_info, unmatched_info

def main():
    ES_HOST = 'http://localhost:9200'
    es = Elasticsearch([ES_HOST])
    
    if not es.ping():
        logging.error("Elasticsearch connection failed.")
        raise SystemExit("Elasticsearch connection failed. Exiting the script.")
    else:
        logging.info("Elasticsearch is connected.")

    if not os.path.exists(FILE_PATH):
        logging.error("File not found at path: " + FILE_PATH)
        raise SystemExit("File not found at path: " + FILE_PATH)

    records = read_file(FILE_PATH)
    indices = get_indices_with_customerid_field(es)
    
    if not indices:
        logging.error("No indices found with the CustomerID field.")
        raise SystemExit("No indices found with the CustomerID field. Exiting the script.")

    total_indices_scanned = 0
    total_docs_deleted = 0

    for record in records:
        matched_info, unmatched_info = search_and_delete_duplicates(es, indices, record)
        total_indices_scanned += len(indices)

        if matched_info:
            for index, info in matched_info.items():
                total_docs_deleted += len(info['deleted_ids'])
                print(f"Record {record} found in index '{index}' with {info['total_matched']} matches.")
                print(f"First document ID kept: {info['first_doc_id']}")
                print(f"Deleted document IDs: {info['deleted_ids']}")
        else:
            print(f"Record {record} did not match any documents in the scanned indices.")

        print(f"Record {record} did not match in the following indices: {unmatched_info}")

    print(f"Total indices scanned: {total_indices_scanned}")
    print(f"Total documents deleted: {total_docs_deleted}")

if __name__ == "__main__":
    main()
